name: Build and deploy to dev

on:
  push:
    branches:
      - 'master'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Miljø'
        required: true
        default: 'q2'
        type: choice
        options:
          - q1
          - q2
      bump_patch:
        description: 'Velg "bump" her for å bygge release og øke patchversjon på snapshot. Kun for master branch.'
        default: ''
        type: choice
        options:
          - ''
          - bump

env:
  APPNAME: meldekortservice
  ENVIRONMENT: ${{ github.event.inputs.environment }}
  CLUSTER: dev-fss
  NAIS_FILE: .nais/nais.yaml
  MAIN_BRANCH: refs/heads/master

jobs:
  build:
    name: Build and deploy
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Check if correct branch
        if: github.event.inputs.bump_patch == 'bump' && github.ref != env.MAIN_BRANCH
        run: |
          echo "Release skal kun bygges fra ${{ env.MAIN_BRANCH }} branch!"
          exit 1

      - name: Set default environment for push
        if: github.event_name == 'push' && github.ref == env.MAIN_BRANCH
        run: echo "ENVIRONMENT=q2" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Read version from version.json
        id: customVersion
        run: echo "VERSION=$(jq -r '.version' version.json)" >> $GITHUB_ENV

      # Setter timestamp, eks. -20220104111118
      - name: Set snapshot timestamp
        id: snapshotTimestamp
        if: github.event.inputs.bump_patch != 'bump'
        run: |
          echo "TIMESTAMP=-$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      # Version blir eksisterende versjon fra POM uten -SNAPSHOT
      # For release:  eks 1.0.1
      # For snapshot: eks 1.0.1-20220104111118
      - name: Calculate release version
        run: |
          echo "RELEASE_VERSION=$(echo "${{ env.VERSION }}${{ env.TIMESTAMP }}" | sed 's/-SNAPSHOT//g')" >> $GITHUB_ENV

      - name: Set vars
        id: setVars
        run: |
          echo "IMAGE=ghcr.io/${{ github.repository }}/${{ env.APPNAME }}:${{ env.RELEASE_VERSION }}" >> $GITHUB_ENV

      - name: Set release version in version.json
        run: |
          jq '.version="${{ env.RELEASE_VERSION }}"' version.json > version.json.new
          mv version.json.new version.json

      - name: Build application
        run: ./gradlew build

      - name: Build Docker image
        run: |
          ./gradlew clean build -x test
          docker build -t ${{ env.IMAGE }} .

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker push ${{ env.IMAGE }}

      - name: Deploy to dev
        if: env.ENVIRONMENT == 'q1' || env.ENVIRONMENT == 'q2' || (github.event_name == 'push' && github.ref == env.MAIN_BRANCH)
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          PRINT_PAYLOAD: true
          CLUSTER: ${{ env.CLUSTER }}
          RESOURCE: ${{ env.NAIS_FILE }}
          VAR: image=${{ env.IMAGE }},appName=${{ env.APPNAME }}
          VARS: .nais/vars-${{ env.ENVIRONMENT }}.yaml
          WAIT: false

      - name: Archive files in .nais
        if: github.event.inputs.bump_patch == 'bump' && github.ref == env.MAIN_BRANCH
        uses: thedoctor0/zip-release@master
        with:
          path: .nais
          filename: '${{ env.APPNAME }}-${{ env.RELEASE_VERSION }}.zip'

      - name: Create release
        if: github.event.inputs.bump_patch == 'bump' && github.ref == env.MAIN_BRANCH
        uses: ncipollo/release-action@v1
        with:
          tag: 'v${{ env.RELEASE_VERSION }}'
          artifacts: '${{ env.APPNAME }}-${{ env.RELEASE_VERSION }}.zip'
          token: ${{ secrets.GITHUB_TOKEN }}

      # Next version blir eksisterende versjon + 0.0.1, med postfix -SNAPSHOT
      - name: Calculate next version
        if: github.event.inputs.bump_patch == 'bump' && github.ref == env.MAIN_BRANCH
        run: |
          echo "NEXT_RELEASE_VERSION=$(echo "${{ env.VERSION }}" | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g' | sed 's/$/-SNAPSHOT/')" >> $GITHUB_ENV

      # Hvis det er ny versjon, oppdater version.json og utfør git commit/push
      - name: Set next version in version.json
        if: github.event.inputs.bump_patch == 'bump' && github.ref == env.MAIN_BRANCH
        run: |
          jq '.version="${{ env.NEXT_RELEASE_VERSION }}"' version.json > version.json.new
          mv version.json.new version.json

      - name: Commit bumped version
        if: github.event.inputs.bump_patch == 'bump' && github.ref == env.MAIN_BRANCH
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -m "Bump version fra Github Actions" -a
          git tag -a ${{ env.APPNAME }}-${{ env.NEXT_RELEASE_VERSION }} -m ${{ env.APPNAME }}-${{ env.NEXT_RELEASE_VERSION }}

      - name: Push changes
        if: github.event.inputs.bump_patch == 'bump' && github.ref == env.MAIN_BRANCH
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
